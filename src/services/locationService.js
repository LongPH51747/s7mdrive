import Geolocation from 'react-native-geolocation-service';
import {PermissionsAndroid, Platform, Alert} from 'react-native';

// D·ªØ li·ªáu post_office t·ª´ db.json
const postOffices = [
  {
    id: "1",
    province: "H√† N·ªôi",
    address: "Cao ƒë·∫≥ng FPT Polytechnic, Ph·ªë Tr·ªãnh VƒÉn B√¥, Qu·∫≠n Nam T·ª´ Li√™m, H√† N·ªôi",
    latitude: 21.0380074,
    longitude: 105.7468965
  }
];

// H√†m xin quy·ªÅn truy c·∫≠p v·ªã tr√≠
export const requestLocationPermission = async () => {
  console.log('üîê B·∫Øt ƒë·∫ßu xin quy·ªÅn truy c·∫≠p v·ªã tr√≠...');
  console.log('üîê Platform:', Platform.OS);
  
  if (Platform.OS === 'ios') {
    console.log('üîê ƒêang xin quy·ªÅn tr√™n iOS...');
    const auth = await Geolocation.requestAuthorization('whenInUse');
    console.log('üîê K·∫øt qu·∫£ quy·ªÅn iOS:', auth);
    
    if (auth === 'granted') {
      console.log('‚úÖ Quy·ªÅn iOS ƒë√£ ƒë∆∞·ª£c c·∫•p');
      return true;
    } else {
      console.log('‚ùå Quy·ªÅn iOS b·ªã t·ª´ ch·ªëi:', auth);
    }
  }

  if (Platform.OS === 'android') {
    console.log('üîê ƒêang xin quy·ªÅn tr√™n Android...');
    console.log('üîê Quy·ªÅn y√™u c·∫ßu:', PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION);
    
    const granted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      {
        title: 'Quy·ªÅn truy c·∫≠p v·ªã tr√≠',
        message: '·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ check-in',
        buttonNeutral: 'H·ªèi l·∫°i sau',
        buttonNegative: 'T·ª´ ch·ªëi',
        buttonPositive: 'ƒê·ªìng √Ω',
      },
    );
    
    console.log('üîê K·∫øt qu·∫£ quy·ªÅn Android:', granted);
    console.log('üîê C√°c tr·∫°ng th√°i c√≥ th·ªÉ:');
    console.log('   - GRANTED:', PermissionsAndroid.RESULTS.GRANTED);
    console.log('   - DENIED:', PermissionsAndroid.RESULTS.DENIED);
    console.log('   - NEVER_ASK_AGAIN:', PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN);
    
    if (granted === PermissionsAndroid.RESULTS.GRANTED) {
      console.log('‚úÖ Quy·ªÅn Android ƒë√£ ƒë∆∞·ª£c c·∫•p');
      return true;
    } else if (granted === PermissionsAndroid.RESULTS.DENIED) {
      console.log('‚ùå Quy·ªÅn Android b·ªã t·ª´ ch·ªëi');
    } else if (granted === PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN) {
      console.log('‚ùå Quy·ªÅn Android b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn');
    }
  }
  
  console.log('‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v·ªã tr√≠');
  return false;
};

// H√†m t√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm (Haversine formula)
export const calculateDistance = (lat1, lon1, lat2, lon2) => {
  console.log('üìè B·∫Øt ƒë·∫ßu t√≠nh kho·∫£ng c√°ch b·∫±ng Haversine formula...');
  console.log('üìè ƒêi·ªÉm 1 (v·ªã tr√≠ c·ªßa b·∫°n):', { lat: lat1, lon: lon1 });
  console.log('üìè ƒêi·ªÉm 2 (b∆∞u c·ª•c):', { lat: lat2, lon: lon2 });
  
  const R = 6371; // B√°n k√≠nh tr√°i ƒë·∫•t (km)
  console.log('üìè B√°n k√≠nh tr√°i ƒë·∫•t (R):', R, 'km');
  
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  console.log('üìè Ch√™nh l·ªách Latitude (radians):', dLat.toFixed(6));
  console.log('üìè Ch√™nh l·ªách Longitude (radians):', dLon.toFixed(6));
  
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  console.log('üìè Gi√° tr·ªã a (intermediate):', a.toFixed(6));
  
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  console.log('üìè Gi√° tr·ªã c (angular distance):', c.toFixed(6));
  
  const distanceKm = R * c; // Kho·∫£ng c√°ch t√≠nh b·∫±ng km
  const distanceM = distanceKm * 1000; // Chuy·ªÉn v·ªÅ m√©t
  
  console.log('üìè Kho·∫£ng c√°ch t√≠nh ƒë∆∞·ª£c:');
  console.log('   - Kilomet:', distanceKm.toFixed(6), 'km');
  console.log('   - M√©t:', distanceM.toFixed(2), 'm');
  console.log('   - M√©t (l√†m tr√≤n):', Math.round(distanceM), 'm');
  
  return distanceM;
};

// H√†m l·∫•y v·ªã tr√≠ hi·ªán t·∫°i
export const getCurrentLocation = () => {
  return new Promise((resolve, reject) => {
    console.log('üìç B·∫Øt ƒë·∫ßu l·∫•y v·ªã tr√≠ GPS...');
    console.log('üìç C·∫•u h√¨nh GPS:');
    console.log('   - enableHighAccuracy:', true);
    console.log('   - timeout:', '15 gi√¢y');
    console.log('   - maximumAge:', '10 gi√¢y');
    
    Geolocation.getCurrentPosition(
      (position) => {
        console.log('üìç GPS th√†nh c√¥ng!');
        console.log('üìç Th√¥ng tin v·ªã tr√≠ chi ti·∫øt:');
        console.log('   - Latitude:', position.coords.latitude);
        console.log('   - Longitude:', position.coords.longitude);
        console.log('   - Accuracy:', position.coords.accuracy, 'm√©t');
        console.log('   - Altitude:', position.coords.altitude || 'Kh√¥ng c√≥');
        console.log('   - Heading:', position.coords.heading || 'Kh√¥ng c√≥');
        console.log('   - Speed:', position.coords.speed || 'Kh√¥ng c√≥');
        console.log('   - Timestamp:', new Date(position.timestamp).toLocaleString('vi-VN'));
        
        const location = {
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy,
          timestamp: position.timestamp
        };
        
        console.log('üìç V·ªã tr√≠ ƒë√£ l·∫•y th√†nh c√¥ng:', location);
        resolve(location);
      },
      (error) => {
        console.error('üìç GPS th·∫•t b·∫°i!');
        console.error('üìç M√£ l·ªói:', error.code);
        console.error('üìç Th√¥ng b√°o l·ªói:', error.message);
        
        // Gi·∫£i th√≠ch m√£ l·ªói
        const errorMessages = {
          1: 'PERMISSION_DENIED - Ng∆∞·ªùi d√πng t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p v·ªã tr√≠',
          2: 'POSITION_UNAVAILABLE - Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠',
          3: 'TIMEOUT - H·∫øt th·ªùi gian ch·ªù l·∫•y v·ªã tr√≠',
          4: 'PLAY_SERVICE_NOT_AVAILABLE - Google Play Services kh√¥ng kh·∫£ d·ª•ng (Android)',
          5: 'SETTINGS_NOT_SATISFIED - C√†i ƒë·∫∑t v·ªã tr√≠ kh√¥ng th·ªèa m√£n',
          6: 'INTERNAL_ERROR - L·ªói n·ªôi b·ªô'
        };
        
        console.error('üìç Gi·∫£i th√≠ch l·ªói:', errorMessages[error.code] || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
        reject(error);
      },
      {
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 10000,
      }
    );
  });
};

// H√†m ki·ªÉm tra kho·∫£ng c√°ch ƒë·∫øn b∆∞u c·ª•c (s·ª≠ d·ª•ng user data)
export const checkDistanceToPostOfficeWithUserData = async (user) => {
  console.log('=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA KHO·∫¢NG C√ÅCH (USER DATA) ===');
  console.log('Th√¥ng tin user:', {
    id: user?.id,
    name: user?.name,
    post_office_name: user?.post_office_name,
    post_office_address: user?.post_office_address,
    post_office_latitude: user?.post_office_latitude,
    post_office_longitude: user?.post_office_longitude
  });
  console.log('Th·ªùi gian b·∫Øt ƒë·∫ßu:', new Date().toLocaleString('vi-VN'));
  
  try {
    // Xin quy·ªÅn truy c·∫≠p v·ªã tr√≠
    console.log('üîê ƒêang xin quy·ªÅn truy c·∫≠p v·ªã tr√≠...');
    const hasPermission = await requestLocationPermission();
    console.log('‚úÖ Quy·ªÅn truy c·∫≠p v·ªã tr√≠:', hasPermission ? 'ƒê√£ c·∫•p' : 'B·ªã t·ª´ ch·ªëi');
    
    if (!hasPermission) {
      throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v·ªã tr√≠');
    }

    // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    console.log('üìç ƒêang l·∫•y v·ªã tr√≠ hi·ªán t·∫°i...');
    const currentLocation = await getCurrentLocation();
    console.log('üìç V·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n:');
    console.log('   - Latitude:', currentLocation.latitude);
    console.log('   - Longitude:', currentLocation.longitude);
    console.log('   - Link Google Maps:', `https://www.google.com/maps?q=${currentLocation.latitude},${currentLocation.longitude}`);

    // Ki·ªÉm tra th√¥ng tin b∆∞u c·ª•c t·ª´ user
    if (!user?.post_office_latitude || !user?.post_office_longitude) {
      console.log('‚ùå Kh√¥ng c√≥ th√¥ng tin t·ªça ƒë·ªô b∆∞u c·ª•c t·ª´ user');
      throw new Error('Kh√¥ng c√≥ th√¥ng tin t·ªça ƒë·ªô b∆∞u c·ª•c');
    }

    const postOfficeData = {
      id: user.id,
      name: user.post_office_name,
      address: user.post_office_address,
      latitude: user.post_office_latitude,
      longitude: user.post_office_longitude
    };

    console.log('üè¢ Th√¥ng tin b∆∞u c·ª•c t·ª´ user:');
    console.log('   - ID:', postOfficeData.id);
    console.log('   - T√™n:', postOfficeData.name);
    console.log('   - ƒê·ªãa ch·ªâ:', postOfficeData.address);
    console.log('   - Latitude:', postOfficeData.latitude);
    console.log('   - Longitude:', postOfficeData.longitude);
    console.log('   - Link Google Maps:', `https://www.google.com/maps?q=${postOfficeData.latitude},${postOfficeData.longitude}`);

    // T√≠nh kho·∫£ng c√°ch
    console.log('üìè ƒêang t√≠nh kho·∫£ng c√°ch...');
    const distance = calculateDistance(
      currentLocation.latitude,
      currentLocation.longitude,
      postOfficeData.latitude,
      postOfficeData.longitude
    );

    console.log('üìè K·∫øt qu·∫£ t√≠nh kho·∫£ng c√°ch:');
    console.log('   - Kho·∫£ng c√°ch ch√≠nh x√°c:', distance.toFixed(2), 'm√©t');
    console.log('   - Kho·∫£ng c√°ch l√†m tr√≤n:', Math.round(distance), 'm√©t');
    console.log('   - Ph·∫°m vi cho ph√©p:', '100 m√©t');
    console.log('   - C√≥ trong ph·∫°m vi kh√¥ng:', distance <= 100 ? '‚úÖ C√ì' : '‚ùå KH√îNG');

    // Th√¥ng tin chi ti·∫øt v·ªÅ v·ªã tr√≠
    console.log('üó∫Ô∏è Th√¥ng tin chi ti·∫øt:');
    console.log('   - V·ªã tr√≠ c·ªßa b·∫°n:', `${currentLocation.latitude}, ${currentLocation.longitude}`);
    console.log('   - V·ªã tr√≠ b∆∞u c·ª•c:', `${postOfficeData.latitude}, ${postOfficeData.longitude}`);
    console.log('   - Ch√™nh l·ªách Latitude:', Math.abs(currentLocation.latitude - postOfficeData.latitude).toFixed(6));
    console.log('   - Ch√™nh l·ªách Longitude:', Math.abs(currentLocation.longitude - postOfficeData.longitude).toFixed(6));

    const result = {
      success: true,
      distance: distance,
      currentLocation: currentLocation,
      postOffice: postOfficeData,
      isWithinRange: distance <= 100
    };

    console.log('‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:', result);
    console.log('=== K·∫æT TH√öC KI·ªÇM TRA KHO·∫¢NG C√ÅCH (USER DATA) ===\n');
    
    return result;
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra kho·∫£ng c√°ch:', error);
    console.log('=== K·∫æT TH√öC KI·ªÇM TRA KHO·∫¢NG C√ÅCH (USER DATA) (L·ªñI) ===\n');
    return {
      success: false,
      error: error.message
    };
  }
};

// H√†m ki·ªÉm tra kho·∫£ng c√°ch ƒë·∫øn b∆∞u c·ª•c (legacy - s·ª≠ d·ª•ng userId)
export const checkDistanceToPostOffice = async (userId) => {
  console.log('=== B·∫ÆT ƒê·∫¶U KI·ªÇM TRA KHO·∫¢NG C√ÅCH ===');
  console.log('User ID (post_office_id):', userId);
  console.log('Th·ªùi gian b·∫Øt ƒë·∫ßu:', new Date().toLocaleString('vi-VN'));
  
  try {
    // Xin quy·ªÅn truy c·∫≠p v·ªã tr√≠
    console.log('üîê ƒêang xin quy·ªÅn truy c·∫≠p v·ªã tr√≠...');
    const hasPermission = await requestLocationPermission();
    console.log('‚úÖ Quy·ªÅn truy c·∫≠p v·ªã tr√≠:', hasPermission ? 'ƒê√£ c·∫•p' : 'B·ªã t·ª´ ch·ªëi');
    
    if (!hasPermission) {
      throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v·ªã tr√≠');
    }

    // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
    console.log('üìç ƒêang l·∫•y v·ªã tr√≠ hi·ªán t·∫°i...');
    const currentLocation = await getCurrentLocation();
    console.log('üìç V·ªã tr√≠ hi·ªán t·∫°i c·ªßa b·∫°n:');
    console.log('   - Latitude:', currentLocation.latitude);
    console.log('   - Longitude:', currentLocation.longitude);
    console.log('   - Link Google Maps:', `https://www.google.com/maps?q=${currentLocation.latitude},${currentLocation.longitude}`);

    // T√¨m post_office c·ªßa user
    console.log('üè¢ ƒêang t√¨m th√¥ng tin b∆∞u c·ª•c...');
    console.log('üìã Danh s√°ch t·∫•t c·∫£ b∆∞u c·ª•c:', postOffices);
    const userPostOffice = postOffices.find(office => office.id === userId);
    
    if (!userPostOffice) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y b∆∞u c·ª•c v·ªõi ID:', userId);
      throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin b∆∞u c·ª•c');
    }

    console.log('üè¢ Th√¥ng tin b∆∞u c·ª•c c·ªßa b·∫°n:');
    console.log('   - ID:', userPostOffice.id);
    console.log('   - T·ªânh/Th√†nh:', userPostOffice.province);
    console.log('   - ƒê·ªãa ch·ªâ:', userPostOffice.address);
    console.log('   - Latitude:', userPostOffice.latitude);
    console.log('   - Longitude:', userPostOffice.longitude);
    console.log('   - Link Google Maps:', `https://www.google.com/maps?q=${userPostOffice.latitude},${userPostOffice.longitude}`);

    // T√≠nh kho·∫£ng c√°ch
    console.log('üìè ƒêang t√≠nh kho·∫£ng c√°ch...');
    const distance = calculateDistance(
      currentLocation.latitude,
      currentLocation.longitude,
      userPostOffice.latitude,
      userPostOffice.longitude
    );

    console.log('üìè K·∫øt qu·∫£ t√≠nh kho·∫£ng c√°ch:');
    console.log('   - Kho·∫£ng c√°ch ch√≠nh x√°c:', distance.toFixed(2), 'm√©t');
    console.log('   - Kho·∫£ng c√°ch l√†m tr√≤n:', Math.round(distance), 'm√©t');
    console.log('   - Ph·∫°m vi cho ph√©p:', '100 m√©t');
    console.log('   - C√≥ trong ph·∫°m vi kh√¥ng:', distance <= 100 ? '‚úÖ C√ì' : '‚ùå KH√îNG');

    // Th√¥ng tin chi ti·∫øt v·ªÅ v·ªã tr√≠
    console.log('üó∫Ô∏è Th√¥ng tin chi ti·∫øt:');
    console.log('   - V·ªã tr√≠ c·ªßa b·∫°n:', `${currentLocation.latitude}, ${currentLocation.longitude}`);
    console.log('   - V·ªã tr√≠ b∆∞u c·ª•c:', `${userPostOffice.latitude}, ${userPostOffice.longitude}`);
    console.log('   - Ch√™nh l·ªách Latitude:', Math.abs(currentLocation.latitude - userPostOffice.latitude).toFixed(6));
    console.log('   - Ch√™nh l·ªách Longitude:', Math.abs(currentLocation.longitude - userPostOffice.longitude).toFixed(6));

    const result = {
      success: true,
      distance: distance,
      currentLocation: currentLocation,
      postOffice: userPostOffice,
      isWithinRange: distance <= 2000
    };

    console.log('‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:', result);
    console.log('=== K·∫æT TH√öC KI·ªÇM TRA KHO·∫¢NG C√ÅCH ===\n');
    
    return result;
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra kho·∫£ng c√°ch:', error);
    console.log('=== K·∫æT TH√öC KI·ªÇM TRA KHO·∫¢NG C√ÅCH (L·ªñI) ===\n');
    return {
      success: false,
      error: error.message
    };
  }
};

// H√†m l·∫•y th√¥ng tin b∆∞u c·ª•c
export const getPostOfficeInfo = (postOfficeId) => {
  return postOffices.find(office => office.id === postOfficeId);
};

// H√†m l·∫•y t·∫•t c·∫£ b∆∞u c·ª•c
export const getAllPostOffices = () => {
  return postOffices;
}; 