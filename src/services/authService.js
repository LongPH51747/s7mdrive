import apiClient, {externalApiClient} from './apiClient';
import {API_CONFIG} from '../constants/api';

class AuthService {
  // ƒêƒÉng nh·∫≠p s·ª≠ d·ª•ng API external
  async login(credentials) {
    try {
      console.log('üîê ƒêang ƒëƒÉng nh·∫≠p v·ªõi API external...');
      console.log('üì§ Request body:', {
        user_name: credentials.username,
        password: credentials.password,
      });

      const response = await externalApiClient.post(API_CONFIG.ENDPOINTS.SHIPPER_LOGIN, {
        user_name: credentials.username,
        password: credentials.password,
      });

      console.log('üì• Response status:', response.status);
      console.log('üì• Response data:', response.data);

      // Ki·ªÉm tra status code 200
      if (response.status === 200) {
        // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
        const responseData = response.data;
        
        // X·ª≠ l√Ω response m·ªõi v·ªõi c·∫•u tr√∫c {token, shipper}
        if (responseData.token && responseData.shipper) {
          const shipperData = responseData.shipper;
          
          // T·∫°o object user v·ªõi format t∆∞∆°ng th√≠ch
          const user = {
            id: shipperData._id,
            username: shipperData.user_name,
            name: shipperData.name,
            phone: shipperData.phone_number,
            role: 'shipper',
            status: shipperData.status,
            password: credentials.password, // L∆∞u password ƒë·ªÉ t∆∞∆°ng th√≠ch
            
            // Th√¥ng tin b∆∞u c·ª•c
            post_office: shipperData.post_office,
            post_office_name: shipperData.post_office?.name,
            post_office_address: shipperData.post_office?.address_post_office,
            post_office_latitude: shipperData.post_office?.latitude,
            post_office_longitude: shipperData.post_office?.longitude,
            
            // Th√¥ng tin khu v·ª±c giao h√†ng
            address_shipping: shipperData.address_shipping,
            
            // Th√¥ng tin c√¥ng vi·ªác
            work: shipperData.work || [],
            
            // Token
            token: responseData.token,
            
            // Th√¥ng tin th·ªùi gian
            createdAt: shipperData.createdAt,
            updatedAt: shipperData.updatedAt,
            
            ...shipperData, // Th√™m t·∫•t c·∫£ data kh√°c t·ª´ server
          };

          return {
            success: true,
            user: user,
          };
        } else {
          return {
            success: false,
            message: 'Response kh√¥ng h·ª£p l·ªá: thi·∫øu token ho·∫∑c th√¥ng tin shipper',
          };
        }
      } else {
        return {
          success: false,
          message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
        };
      }
    } catch (error) {
      console.error('‚ùå Login error:', error);
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      if (error.response) {
        // Server tr·∫£ v·ªÅ response v·ªõi status code kh√°c 200
        console.error('‚ùå Server error:', error.response.status, error.response.data);
        return {
          success: false,
          message: error.response.data?.message || 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
        };
      } else if (error.request) {
        // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c response t·ª´ server
        console.error('‚ùå Network error:', error.request);
        return {
          success: false,
          message: 'L·ªói k·∫øt n·ªëi server. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.',
        };
      } else {
        // L·ªói kh√°c
        console.error('‚ùå Other error:', error.message);
        return {
          success: false,
          message: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.',
        };
      }
    }
  }

  // L·∫•y th√¥ng tin user theo ID
  async getUserById(userId) {
    try {
      const response = await apiClient.get(
        `${API_CONFIG.ENDPOINTS.USERS}/${userId}`,
      );
      return response.data;
    } catch (error) {
      console.error('Get user error:', error);
      return null;
    }
  }

  // L·∫•y danh s√°ch t·∫•t c·∫£ users (cho admin)
  async getAllUsers() {
    try {
      const response = await apiClient.get(API_CONFIG.ENDPOINTS.USERS);
      return response.data;
    } catch (error) {
      console.error('Get all users error:', error);
      return [];
    }
  }

  // C·∫≠p nh·∫≠t th√¥ng tin user
  async updateUser(userId, userData) {
    try {
      await apiClient.patch(
        `${API_CONFIG.ENDPOINTS.USERS}/${userId}`,
        userData,
      );
      return true;
    } catch (error) {
      console.error('Update user error:', error);
      return false;
    }
  }

  // C·∫≠p nh·∫≠t v·ªã tr√≠ hi·ªán t·∫°i c·ªßa shipper
  async updateLocation(userId, location) {
    try {
      await apiClient.patch(`${API_CONFIG.ENDPOINTS.USERS}/${userId}`, {
        current_location: location,
      });
      return true;
    } catch (error) {
      console.error('Update location error:', error);
      return false;
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i shipper
  async updateShipperStatus(userId, status) {
    try {
      await apiClient.patch(`${API_CONFIG.ENDPOINTS.USERS}/${userId}`, {
        status: status,
      });
      return true;
    } catch (error) {
      console.error('Update shipper status error:', error);
      return false;
    }
  }
}

export default new AuthService();
